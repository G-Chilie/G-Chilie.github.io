{
  "swagger": "2.0",
  "info": {
    "title": "Questioner API",
    "description": "Questioner API",
    "version": "1.0.0"
  },
  "host": "https://safe-chamber-62773.herokuapp.com",
  "schemes": [
    "https"
  ],
  "basePath": "/api/v1",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/meetups": {
      "get": {
        "summary": "Retrieve Meetups",
        "description": "Retrieve all meetups",
        "tags": [
          "Meetups"
        ],
        "responses": {
          "200": {
            "description": "An array of meetups",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Meetups"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a Meetup record",
        "description": "Adds a new meetup record.",
        "tags": [
          "Meetups"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The meetup to be created",
            "schema": {
              "$ref": "#/definitions/Meetup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of meetup",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Meetup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input supplied in request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/meetups/{id}": {
      "get": {
        "summary": "Retrieve Single Meetups",
        "description": "Retrieve a single meetup record",
        "tags": [
          "Meetups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id (unique identifier) of the recipe",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of meetup",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Meetup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meetup record not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/meetups/upcoming": {
      "get": {
        "summary": "Retrieve Upcoming Meetups",
        "description": "Retrieve all upcoming meetup record",
        "tags": [
          "Meetups"
        ],
        "responses": {
          "200": {
            "description": "An array of meetups",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Meetups"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meetup records not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/meetups/:id/rsvps": {
      "post": {
        "summary": "Creates a Rsvp Record",
        "description": "Adds a new rsvp record.",
        "tags": [
          "Meetups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the meetup to be added to rsvp"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of rsvp record",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Rsvp"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad input supplied in request",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/questions": {
      "post": {
        "summary": "Creates a Question",
        "description": "Adds a new Question record.",
        "tags": [
          "Questions"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "The question to be created",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of question record",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Question"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad input supplied in request",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/questons/:id/upvote": {
      "put": {
        "summary": "Upvotes a question",
        "description": "Upvotes a specified question using the id supplied through the route path",
        "tags": [
          "Questions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id (unique identifier) of the question",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the upvoted question.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Question"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input supplied during the request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "The recipe is not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/questons/:id/downvote": {
      "put": {
        "summary": "Downvotes a question",
        "description": "Downvotes a specified question using the id supplied through the route path",
        "tags": [
          "Questions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id (unique identifier) of the question",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the downvoted question.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Question"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input supplied during the request",
            "schema": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "404": {
            "description": "The recipe is not found",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Meetup": {
      "type": "object",
      "description": "A model that represents a single meetup.",
      "properties": {
        "id": {
          "type": "number",
          "example": 1,
          "description": "Unique identifier representing a meetup."
        },
        "createdOn": {
          "type": "string",
          "example": "Wed Dec 26 2018 08:18:30 GMT+0100 (WAT)",
          "description": "The date the meetup was created."
        },
        "location": {
          "type": "string",
          "example": "Lagos, Nigeria",
          "description": "The location where the meetup would hold"
        },
        "happeningOn": {
          "type": "string",
          "example": "Wed Dec 26 2018 08:18:30 GMT+0100 (WAT)",
          "description": "The date the meetup is sheduled to hold."
        },
        "tags": {
          "type": "array",
          "items": "string",
          "example": [
            "tag1",
            "tag2"
          ],
          "description": "The tags associated with a meetup"
        },
        "images": {
          "type": "array",
          "items": "string",
          "example": [
            "ImageUrl",
            "ImageUrl"
          ],
          "description": "The images associated with a meetup"
        }
      }
    },
    "Meetups": {
      "properties": {
        "meetups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Meetup"
          }
        }
      }
    },
    "Rsvp": {
      "type": "object",
      "description": "A model that represents an Rsvp record",
      "properties": {
        "id": {
          "type": "number",
          "example": 1,
          "description": "Unique identifier representing a Rsvp record."
        },
        "meetup": {
          "type": "number",
          "example": "23",
          "description": "The unique id of the meetup to be added to Rsvp"
        },
        "user": {
          "type": "number",
          "example": "12",
          "description": "The id of the user that added the Rsvp"
        },
        "response": {
          "type": "string",
          "example": "Rsvp response",
          "description": "Rsvp response"
        },
        "status": {
          "type": "string",
          "example": "Yes",
          "description": "Rsvp status message"
        }
      }
    },
    "Question": {
      "type": "object",
      "description": "A model that represents a Question record",
      "properties": {
        "id": {
          "type": "number",
          "example": 1,
          "description": "Unique identifier representing a Question record."
        },
        "createdOn": {
          "type": "string",
          "example": "Thu Jan 03 2019 08:21:36 GMT+0100 (WAT)",
          "description": "The date which the question was created"
        },
        "createdBy": {
          "type": "number",
          "example": "1",
          "description": "The id of the user that added the Question"
        },
        "meetup": {
          "type": "number",
          "example": 1,
          "description": "The unique identifier of the meetup record upon which the question is created"
        },
        "title": {
          "type": "string",
          "example": "Question Title",
          "description": "The title of the question"
        },
        "body": {
          "type": "string",
          "example": "Body of question",
          "description": "The body of the question"
        },
        "votes": {
          "type": "number",
          "items": 0,
          "description": "The number of votes the questio has"
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "description": "A model that represents a validation error response returned by the API.",
      "properties": {
        "status": {
          "type": "number",
          "example": 400,
          "description": "A unique code that can be used by your source code to determine an action to take to rectify the error. These codes are always in the form of a number. For example; 404, 400, 403. This code can be used to determine a message to display to the user."
        },
        "message": {
          "type": "string",
          "example": "Title field cannot be empty",
          "description": "A message to help the user identify what went wrong."
        }
      }
    },
    "NotFoundError": {
      "type": "object",
      "description": "A model that represents a not found error response returned by the API.",
      "properties": {
        "status": {
          "type": "number",
          "example": 404,
          "description": "A unique code that can be used by your source code to determine an action to take to rectify the error. These codes are always in the form of a number. For example; 404, 400, 403. This code can be used to determine a message to display to the user."
        },
        "message": {
          "type": "string",
          "example": "Meetup with id: 111 not found",
          "description": "A message to help the user identify what went wrong."
        }
      }
    },
    "ServerError": {
      "type": "object",
      "description": "A model that represents an internal server error response returned by the API.",
      "properties": {
        "status": {
          "type": "number",
          "example": 500,
          "description": "A unique code that can be used by your source code to determine an action to take to rectify the error. These codes are always in the form of a number. For example; 404, 400, 403. This code can be used to determine a message to display to the user."
        },
        "message": {
          "type": "string",
          "example": "Internal server error",
          "description": "A message to help the user identify what went wrong."
        }
      }
    }
  }
}